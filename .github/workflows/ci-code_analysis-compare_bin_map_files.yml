# Leka - LekaOS
# Copyright 2021 APF France handicap
# SPDX-License-Identifier: Apache-2.0

name: Code Analysis

on:
  push:
    branches:
      - master
      - develop

  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  compare_bin_map_files:
    name: Compare .bin & .map files
    runs-on: ubuntu-latest

    steps:
      #
      # Mark: - Setup
      #
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Setup CI
        uses: ./.github/actions/setup

      #
      # Mark: - Config & compile
      #

      - name: Compile base branch
        run: |
          git checkout ${{ github.event.pull_request.base.ref }}
          make deep_clean
          if [[ "$BASE_MBED_VERSION" != "$HEAD_MBED_VERSION" ]]; then
            make mbed_curl VERSION=${{ env.BASE_MBED_VERSION }}
          fi
          make config
          make

      - name: Move ${{ github.event.pull_request.base.ref }}:${{ env.BASE_SHA }} bin & map files to temporary directory
        run: |
          find _build ! -path '*CMakeFiles*' -name "*.bin" -print0 | xargs -0 -I {} cp {} _build_tmp/${{ env.BASE_SHA }}
          find _build ! -path '*CMakeFiles*' -name "*.map" -print0 | xargs -0 -I {} cp {} _build_tmp/${{ env.BASE_SHA }}

      - name: Compile pr branch
        run: |
          git checkout ${{ github.head_ref }}
          make deep_clean
          if [[ "$BASE_MBED_VERSION" != "$HEAD_MBED_VERSION" ]]; then
            make mbed_curl VERSION=${{ env.HEAD_MBED_VERSION }}
          fi
          make config
          make

      - name: Move ${{ github.head_ref }}:${{ env.HEAD_SHA }} bin & map files to temporary directory
        run: |
          find _build ! -path '*CMakeFiles*' -name "*.bin" -print0 | xargs -0 -I {} cp {} _build_tmp/${{ env.HEAD_SHA }}
          find _build ! -path '*CMakeFiles*' -name "*.map" -print0 | xargs -0 -I {} cp {} _build_tmp/${{ env.HEAD_SHA }}

      - name: Compare bin files
        shell: bash
        run: |
          shopt -s xpg_echo

          echo 'STATUS_DIFF_OUTPUT<<EOF_STATUS_DIFF_OUTPUT' >> $GITHUB_ENV

          base_targets=($(echo $(find _build_tmp/${{ env.BASE_SHA }} -name '*.bin' -execdir basename -s '.bin' {} +) | tr ' ' '\n' | sort -du | tr '\n' ' '))
          head_targets=($(echo $(find _build_tmp/${{ env.HEAD_SHA }} -name '*.bin' -execdir basename -s '.bin' {} +) | tr ' ' '\n' | sort -du | tr '\n' ' '))
          all_targets=($(echo "${base_targets[@]} ${head_targets[@]}" | tr ' ' '\n' | sort -du | tr '\n' ' '))

          echo "Set added/deleted targets"
          added_targets=()
          deleted_targets=()
          for target in "${all_targets[@]}"; do
            if [[ ${base_targets[*]} =~ "$target" ]] && ! [[ ${head_targets[*]} =~ "$target" ]]; then
              deleted_targets+=($target)
            elif ! [[ ${base_targets[*]} =~ "$target" ]] && [[ ${head_targets[*]} =~ "$target" ]]; then
              added_targets+=($target)
            fi
          done

          echo "all:     ${all_targets[*]}"
          echo "base:    ${base_targets[*]}"
          echo "head:    ${head_targets[*]}"
          echo "added:   ${added_targets[*]}"
          echo "deleted: ${deleted_targets[*]}"

          echo "| Target | Status | .bin | .map | Static RAM (base/head) | Static RAM Δ | Total Flash (base/head) | Total Flash Δ |" >> $GITHUB_ENV
          echo "|-------|:------:|:------:|:------:|:------:|:------:|:------:|:------:|" >> $GITHUB_ENV

          for target in "${all_targets[@]}"; do
            target_name=$target

            echo -n "| $target_name " >> $GITHUB_ENV

            if [[ " ${added_targets[*]} " =~ " $target " ]]; then
              echo -n "| :sparkles: | - | - " >> $GITHUB_ENV

              python3 extern/mbed-os/tools/memap.py -t GCC_ARM _build_tmp/${{ env.HEAD_SHA }}/$target_name.map > _build_tmp/${{ env.HEAD_SHA }}/$target_name.txt
              head_ram=$(grep -Po '(?<=\(data \+ bss\):\s)[[:digit:]]*' _build_tmp/${{ env.HEAD_SHA }}/$target_name.txt)
              head_flash=$(grep -Po '(?<=\(text \+ data\):\s)[[:digit:]]*' _build_tmp/${{ env.HEAD_SHA }}/$target_name.txt)

              echo -n "| $head_ram | - | $head_flash | - |\n" >> $GITHUB_ENV
            elif [[ " ${deleted_targets[*]} " =~ " $target " ]]; then
              echo -n "| :coffin: | - | - | - | - | - | - |\n" >> $GITHUB_ENV
            else
              echo -n "| :heavy_check_mark: " >> $GITHUB_ENV

              if ! output=$(diff _build_tmp/${{ env.BASE_SHA }}/$target_name.bin _build_tmp/${{ env.HEAD_SHA }}/$target_name.bin 2>/dev/null); then
                echo -n "| :x: " >> $GITHUB_ENV
              else
                echo -n "| :white_check_mark: " >> $GITHUB_ENV
              fi

              python3 extern/mbed-os/tools/memap.py -t GCC_ARM _build_tmp/${{ env.BASE_SHA }}/$target_name.map > _build_tmp/${{ env.BASE_SHA }}/$target_name.txt
              python3 extern/mbed-os/tools/memap.py -t GCC_ARM _build_tmp/${{ env.HEAD_SHA }}/$target_name.map > _build_tmp/${{ env.HEAD_SHA }}/$target_name.txt

              if ! output=$(diff _build_tmp/${{ env.BASE_SHA }}/$target_name.txt _build_tmp/${{ env.HEAD_SHA }}/$target_name.txt 2>/dev/null); then
                echo -n "| :x: " >> $GITHUB_ENV
              else
                echo -n "| :white_check_mark: " >> $GITHUB_ENV
              fi

              base_ram=$(grep -Po '(?<=\(data \+ bss\):\s)[[:digit:]]*' _build_tmp/${{ env.BASE_SHA }}/$target_name.txt)
              head_ram=$(grep -Po '(?<=\(data \+ bss\):\s)[[:digit:]]*' _build_tmp/${{ env.HEAD_SHA }}/$target_name.txt)
              diff_ram=$(($head_ram - $base_ram))

              if [ $diff_ram -lt 0 ]; then
                  diff_ram=":chart_with_downwards_trend: $diff_ram"
              elif [ $diff_ram -gt 0 ]; then
                  diff_ram=":chart_with_upwards_trend: $diff_ram"
              else
                  diff_ram="ø"
              fi

              base_flash=$(grep -Po '(?<=\(text \+ data\):\s)[[:digit:]]*' _build_tmp/${{ env.BASE_SHA }}/$target_name.txt)
              head_flash=$(grep -Po '(?<=\(text \+ data\):\s)[[:digit:]]*' _build_tmp/${{ env.HEAD_SHA }}/$target_name.txt)
              diff_flash=$(($head_flash - $base_flash))

              if [ $diff_flash -lt 0 ]; then
                  diff_flash=":chart_with_downwards_trend:  $diff_flash"
              elif [ $diff_flash -gt 0 ]; then
                  diff_flash=":chart_with_upwards_trend: $diff_flash"
              else
                  diff_flash="ø"
              fi

              echo -n "| $base_ram / $head_ram | $diff_ram | $base_flash / $head_flash | $diff_flash " >> $GITHUB_ENV

              echo -n "|\n" >> $GITHUB_ENV
            fi

          done

          echo 'EOF_STATUS_DIFF_OUTPUT' >> $GITHUB_ENV

      - name: Compare maps files
        shell: bash
        run: |
          shopt -s xpg_echo

          echo 'MAP_DIFF_OUTPUT<<EOF_MAP_DIFF_OUTPUT' >> $GITHUB_ENV

          base_targets=($(echo $(find _build_tmp/${{ env.BASE_SHA }} -name '*.bin' -execdir basename -s '.bin' {} +) | tr ' ' '\n' | sort -du | tr '\n' ' '))
          head_targets=($(echo $(find _build_tmp/${{ env.HEAD_SHA }} -name '*.bin' -execdir basename -s '.bin' {} +) | tr ' ' '\n' | sort -du | tr '\n' ' '))
          all_targets=($(echo "${base_targets[@]} ${head_targets[@]}" | tr ' ' '\n' | sort -du | tr '\n' ' '))

          echo "Set added/deleted targets"
          added_targets=()
          deleted_targets=()
          for target in "${all_targets[@]}"; do
            if [[ " ${base_targets[*]} " =~ " $target " ]] && ! [[ " ${head_targets[*]} " =~ " $target " ]]; then
              deleted_targets+=($target)
            elif ! [[ " ${base_targets[*]} " =~ " $target " ]] && [[ " ${head_targets[*]} " =~ " $target " ]]; then
              added_targets+=($target)
            fi
          done

          echo "all:     ${all_targets[*]}"
          echo "base:    ${base_targets[*]}"
          echo "head:    ${head_targets[*]}"
          echo "added:   ${added_targets[*]}"
          echo "deleted: ${deleted_targets[*]}"

          no_map_diff=true

          for target in "${all_targets[@]}"; do
            target_name=$target

            if ! [[ " ${added_targets[*]} " =~ " $target " ]] && ! [[ " ${deleted_targets[*]} " =~ " $target " ]]; then
              echo "$target not deleted nor new, running diff"

              if ! diff_output=$(diff --unified=150 _build_tmp/${{ env.BASE_SHA }}/$target_name.txt _build_tmp/${{ env.HEAD_SHA }}/$target_name.txt); then
                echo $diff_output

                echo "<details>" >> $GITHUB_ENV
                echo "<summary><b><code>$target_name</code></b> (click to expand)</summary>" >> $GITHUB_ENV
                echo "" >> $GITHUB_ENV

                echo "\`\`\`diff" >> $GITHUB_ENV
                echo "$diff_output" >> $GITHUB_ENV
                echo "\`\`\`" >> $GITHUB_ENV

                echo "" >> $GITHUB_ENV
                echo "</details>" >> $GITHUB_ENV
                echo "" >> $GITHUB_ENV

                no_map_diff=false
              fi

            elif [[ " ${added_targets[*]} " =~ " $target " ]]; then
              echo "$target added, showing map information"
              map_output=$(cat _build_tmp/${{ env.HEAD_SHA }}/$target_name.txt)

              echo "<details>" >> $GITHUB_ENV
              echo "<summary><b><code>$target_name</code></b> (click to expand)</summary>" >> $GITHUB_ENV
              echo "" >> $GITHUB_ENV

              echo "\`\`\`" >> $GITHUB_ENV
              echo "$map_output" >> $GITHUB_ENV
              echo "\`\`\`" >> $GITHUB_ENV

              echo "" >> $GITHUB_ENV
              echo "</details>" >> $GITHUB_ENV
              echo "" >> $GITHUB_ENV

              no_map_diff=false
            fi
          done

          if $no_map_diff; then
              echo "No differenes where found in map files." >> $GITHUB_ENV
          fi

          echo 'EOF_MAP_DIFF_OUTPUT' >> $GITHUB_ENV

      - name: Publish differences
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: analysis_bin_map_files
          recreate: true
          message: |
            #  .map & .bin files analysis report

            ## Versions :bookmark:

            - base: [`${{ github.event.pull_request.base.ref }}`](https://github.com/leka/LekaOS/tree/${{ github.event.pull_request.base.ref }}) / ${{ env.BASE_SHA }} + `${{ env.BASE_MBED_VERSION }}` + `${{ env.BASE_CXX_STANDARD }}`
            - head: [`${{ github.head_ref }}`](https://github.com/leka/LekaOS/tree/${{ github.head_ref }}) / ${{ env.HEAD_SHA }} + `${{ env.HEAD_MBED_VERSION }}` + `${{ env.HEAD_CXX_STANDARD }}`
            - toolchain: `${{ env.TOOLCHAIN_VERSION }}`

            ## Summary :memo:

            <details>
            <summary>Click to show summary</summary>

            - :heavy_check_mark: - existing target
            - :sparkles: - new target
            - :coffin: - deleted target
            - :white_check_mark: - files are the same
            - :x: - files are different

            ${{ env.STATUS_DIFF_OUTPUT }}

            </details>

            ## Map files diff output :world_map:

            <details>
            <summary>Click to show diff list</summary>

            ${{ env.MAP_DIFF_OUTPUT }}

            </details>
