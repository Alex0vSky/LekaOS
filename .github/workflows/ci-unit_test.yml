# CI Workflow

name: CI - Unit Tests

on:
  push:
    branches:
      - develop
      - master
    paths-ignore:
      - "docs/**"
      - "extern/**"
      - "tools/**"
      - ".vscode/**"
      - ".editorconfig"
      - ".gitignore"
      - ".mbed"
      - "LICENSE"
      - "README.md"

  pull_request:
    branches:
      - develop
      - "feature/**"
    paths-ignore:
      - "docs/**"
      - "extern/**"
      - "tools/**"
      - ".vscode/**"
      - ".editorconfig"
      - ".gitignore"
      - ".mbed"
      - "LICENSE"
      - "README.md"

jobs:
  config_build_run:
    name: Config, Build & Run
    runs-on: [self-hosted, build]
    steps:
      - name: Checkout
        uses: actions/checkout@v2.0.0

      - name: Create job timestamp
        id: create_job_timestamp
        run: echo "::set-output name=timestamp::$(date +'%Y%m%d%H%M%S')"

      - name: Cache ccache files
        id: cache_ccache_files
        uses: actions/cache@v2
        with:
          path: ~/.ccache
          key: ${ { runner.os } }-build-cache_ccache_files-${ { steps.create_job_timestamp.outputs.timestamp } }
          restore-keys: |
            ${ { runner.os } }-build-cache_ccache_files-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Cache Mbed OS
        id: cache_mbed_os
        uses: actions/cache@v2
        with:
          path: extern/mbed-os
          key: ${{ runner.os }}-build-cache_mbed_os-${{ hashFiles('extern/mbed-os/platform/include/platform/mbed_version.h', '.mbed_version') }}
          restore-keys: |
            ${{ runner.os }}-build-cache_mbed_os-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Curl Mbed OS
        if: steps.cache_mbed_os.outputs.cache-hit != 'true'
        run: |
          make curl_mbed

      - name: Cache CMake Config
        id: cache_cmake_config
        uses: actions/cache@v2
        with:
          path: cmake/config
          key: ${{ runner.os }}-build-cache_cmake_config-${{ hashFiles('mbed_app.json', 'targets/custom_targets.json', '.mbed_version', 'Makefile', 'CMakeLists.txt', 'tests/unit/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-build-cache_cmake_config-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Cache build directory
        id: cache_build_directory
        uses: actions/cache@v2
        with:
          path: build
          key: ${{ runner.os }}-build-cache_build_directory-${{ hashFiles('mbed_app.json', 'targets/custom_targets.json', '.mbed_version', 'Makefile', 'CMakeLists.txt', 'tests/unit/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-build-cache_build_directory-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Config build system
        if: steps.cache_cmake_config.outputs.cache-hit != 'true' || steps.cache_build_directory.outputs.cache-hit != 'true'
        run: |
          make config

      - name: Ccache pre build
        run: |
          make ccache_prebuild

      - name: Build & run unit tests
        run: |
          make unit_tests

      - name: Ccache post build
        run: |
          make ccache_postbuild
